{% render 'partials/head.liquid' %}

<main class="index-main">

  <h1>Squadpage</h1>
  <p class="sub-title">Ontdek meer over squad 1G hieronder!</p>

  <input type="checkbox" id="tint" hidden>
  <button class="button-stop-animatie" type="button">Stop animatie</button>

  <ul class="filter-select-buttons">
    <li><a href="/">Avatar</a></li>
    <li><a href="/dier/">Dier</a></li>
    <li><a href="/emoji/">Emoji</a></li>
    <li><a href="/eten/">Eten</a></li>
    <li><a href="/hobby/">Hobby</a></li>
    <li><a href="/kleur/">Kleur</a></li>
    <li><a href="/land/">Land</a></li>
    <li><a href="/verjaardag/">Verjaardag</a></li>
  </ul>

  <div class="figure-container">
    {% for person in persons %}
    <figure>
      <label for="tint" class="label-focus" tabindex="0">

        <!-- Voorkant van de kaart -->
        <div class="profile-bubble {{ show }} ">
          {% if show == 'avatar' %}
          {% if person.avatar and person.avatar != '' %}
          <img src="{{ person[show] }}" alt="Avatar van {{ person.name }}" />
          {% else %}
          <img src="https://github.com/{{ person.github_handle }}.png" alt="Avatar van {{ person.name }}" />
          {% endif %}
          {% else %}
          <article>{{ person[show] }}</article>
        {% endif %}

        <form action="/like" method="POST">
        <input type="hidden" name="studentid" value="{{ person.id }}">
        <button type="submit" class="like-button">
          ❤️
        </button>
      </form>

      <span class="like-count">{{ likes[person.id] | default: 0 }} likes</span> <!-- Toon het aantal likes -->

        </div>
      </label>

    </figure>
    {%- endfor %}
  </div>

  <div class="tinted-background" aria-hidden="true"></div>
</main>


<style>
  /* Algemene stijlen */
  html,
  body {
    background-color: #04083F;
    font-family: Verdana, Geneva, Tahoma, sans-serif;
  }

  h1 {
    text-align: center;
    font-size: xx-large;
    color: #88E2C1;
  }

  .sub-title {
    color: #04083F;
    background-color: #9F7AEF;
    padding: 0.7rem;
    border-radius: 50rem;
    margin: 1rem;
    font-size: 1rem;
    text-align: center;
    max-width: max-content;
    justify-self: center;
  }

  ul {
    display: flex;
    flex-wrap: wrap;
    justify-content: center;
    list-style: none;
    margin: 4.5rem 0rem 1.5rem 0rem;
    padding: 0;
    gap: 1rem;

    li {
      border-radius: 50rem;
      padding: 0.7rem;
      border: 0.2rem solid #67c09f;
      background-color: #88E2C1;
      cursor: pointer;

      a {
        color: #04083F;
        text-decoration: none;
      }
    }
  }

  .fav_emoji {
    font-size: 5rem;
    background-color: red;
  }

  .index-main {
    #tint:checked~.tinted-background {
      display: block;
    }

    #tint:checked~.label-focus:has(.profile-bubble.static)~.tinted-background {
      display: none;
    }

    .tinted-background {
      display: none;
      position: fixed;
      inset: 0;
      background-color: rgba(0, 0, 0, 0.5);
      z-index: 99;
      animation: overlay-transition 500ms ease-in;
    }

    .button-stop-animatie {
      position: absolute;
      top: 1em;
      left: 1em;
      color: #88E2C1;
      width: 8em;
      z-index: 101;
      border-radius: 50rem;
      padding: 0.7rem;
      border: 0.2rem solid #88E2C1;
      background-color: #04083F;
      text-decoration: underline;
      cursor: pointer;
      text-decoration: none;
      font-size: 1em;

      &:hover {
        filter: brightness(0.8);
      }

      @media (max-width: 1120px) {
        left: 50%;
        transform: translateX(-50%);
        top: 8.5rem;
      }

    }
  }

  .figure-container {
    margin-top: 3.5rem;
  }

  .profile-bubble {
    --size-circle: 7em;

    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    position: absolute;

    width: var(--size-circle);
    height: var(--size-circle);
    aspect-ratio: 1;
    border-radius: 50%;
    background-color: #b594fc;
    border: 5px solid var(--fav_color, #9F7AEF);
    cursor: pointer;
    z-index: var(--z);

    animation:
      transX calc(var(--durX) * 1s) linear infinite alternate,
      transY calc(var(--durY) * 1s) linear infinite alternate;

    &:hover {
      animation-play-state: paused;
      filter: brightness(1.2);
    }

    .like-button, .like-count {
      display: none;
    }

    &.open {
      display: grid;
      grid-template-columns: min-content 1fr 4em;
      grid-template-rows: 1fr 1fr;
      animation: none;
      position: absolute;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      z-index: 101;
      height: 10em;
      width: 15em;
      border-radius: 15px;
      
      .like-button, .like-count {
        display: block;
      }
    }

    &.static {
      position: relative;
      animation: none;


      &.open {
        display: grid;
        grid-template-columns: min-content 1fr 4em;
        grid-template-rows: 1fr 1fr;
        animation: none;
        z-index: 101;
        height: 10em;
        width: 15em;
        border-radius: 15px;
        position: absolute;

        .website {
          display: none;
        }
      }
    }
  }

  img {
    width: 6rem;
    height: 6rem;
    border-radius: 50%;
  }

  .static-main {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(110px, 2fr));
    gap: 1.5rem;
    justify-items: center;
  }


  @keyframes transX {
    0% {
      translate: 0;
    }

    100% {
      translate: calc(100dvw - var(--size-circle) - 5em);
    }
  }

  @keyframes transY {
    0% {
      transform: translatey(0);
    }

    100% {
      transform: translatey(calc(100dvh - var(--size-circle) - 5em));
    }
  }
</style>




<!-- ===================== -->




<script>
  // selecteer alle cirkels
  let cirkels = document.querySelectorAll(".profile-bubble")
  let stopAnimation = document.querySelector(".button-stop-animatie")

  // genereer nieuwe custom properties
  setPropertyXY()
  // genereer nieuwe custom properties om de 10s
  // let cirkelAnimation = setInterval(setPropertyXY, 10000);


  // Bij een click wordt een class toegevoegd aan de ge-klikte cirkel
  cirkels.forEach(cirkel => {
    cirkel.addEventListener("click", () => {
      cirkel.classList.toggle("open")
    });
  });


  // stop animaties als de stop animatie button geklikt wordt
  stopAnimation.addEventListener("click", (e) => {
    // verander de tekst in de button
    if (stopAnimation.innerText === "Start animatie") {
      stopAnimation.innerText = "Stop animatie";
    } else {
      stopAnimation.innerText = "Start animatie";
    }

    // stop de keyframe animaties
    cirkels.forEach(cirkel => {
      cirkel.classList.toggle("static")
    });

    // zoek de parrent container en verander de layout met een class
    const parentContainer = document.querySelector('.figure-container');
    parentContainer.classList.toggle('static-main');
  });


  // genereer random getallen, seconden, voor de keyframe animatie
  function setPropertyXY() {
    cirkels.forEach(cirkel => {
      // https://www.w3schools.com/js/js_random.asp
      durX = Math.floor(Math.random() * 10);
      durY = Math.floor(Math.random() * 10);
      // z-index
      z = Math.floor(Math.random() * 100);

      // maak custom properties van de random seconden
      cirkel.style.setProperty('--durX', durX)
      cirkel.style.setProperty('--durY', durY)
      cirkel.style.setProperty('--z', z)
    });
  }
</script>

{% render 'partials/foot.liquid' %}